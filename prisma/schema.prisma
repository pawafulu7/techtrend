generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ArticleCategory {
  frontend
  backend
  ai_ml
  security
  devops
  database
  mobile
  web3
  design
  testing
  performance
  architecture
}

model Article {
  id              String        @id @default(cuid())
  title           String
  url             String        @unique
  summary         String?
  thumbnail       String?
  content         String?
  publishedAt     DateTime
  sourceId        String
  bookmarks       Int           @default(0)
  qualityScore    Float         @default(0)
  userVotes       Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  difficulty      String?
  detailedSummary String?
  articleType     String?
  summaryVersion  Int           @default(1)
  category        ArticleCategory?
  source          Source        @relation(fields: [sourceId], references: [id])
  articleViews    ArticleView[]
  favorites       Favorite[]
  tags            Tag[]         @relation("ArticleToTag")

  @@index([publishedAt(sort: Desc)])
  @@index([sourceId])
  @@index([sourceId, publishedAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([qualityScore(sort: Desc)])
  @@index([bookmarks(sort: Desc)])
  @@index([createdAt(sort: Desc)], map: "idx_article_created_at")
  @@index([publishedAt(sort: Desc)], map: "idx_article_published_at")
  @@index([qualityScore(sort: Desc)], map: "idx_article_quality_score")
  @@index([sourceId], map: "idx_article_source_id")
  @@index([sourceId, publishedAt(sort: Desc)], map: "idx_article_source_published")
}

model Source {
  id        String    @id @default(cuid())
  name      String    @unique
  type      String
  url       String
  enabled   Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  category String?
  articles Article[] @relation("ArticleToTag")

  @@index([name])
  @@index([name], map: "idx_tag_name")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  articleViews  ArticleView[]
  favorites     Favorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model ArticleView {
  id        String    @id @default(cuid())
  userId    String
  articleId String
  viewedAt  DateTime?
  isRead    Boolean   @default(false)
  readAt    DateTime?
  article   Article   @relation(fields: [articleId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
  @@index([userId, viewedAt])
  @@index([articleId])
  @@index([userId, isRead])
}

model WeeklyDigest {
  id            String   @id @default(cuid())
  weekStartDate DateTime @unique
  weekEndDate   DateTime
  articleCount  Int
  topArticles   Json
  categories    Json
  createdAt     DateTime @default(now())
}
