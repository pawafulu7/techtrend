generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id              String   @id @default(cuid())
  title           String
  url             String   @unique
  summary         String?  @db.Text
  thumbnail       String?
  content         String?  @db.Text
  publishedAt     DateTime
  sourceId        String
  bookmarks       Int      @default(0)
  qualityScore    Float    @default(0)
  userVotes       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  difficulty      String?
  detailedSummary String?  @db.Text
  articleType     String?
  summaryVersion  Int      @default(1)
  source          Source   @relation(fields: [sourceId], references: [id])
  tags            Tag[]    @relation("ArticleToTag")
  favorites       Favorite[]
  articleViews    ArticleView[]

  @@index([publishedAt(sort: Desc)])
  @@index([sourceId])
  @@index([sourceId, publishedAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([qualityScore(sort: Desc)])
  @@index([bookmarks(sort: Desc)])
}

model Source {
  id        String    @id @default(cuid())
  name      String    @unique
  type      String
  url       String
  enabled   Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  category String?
  articles Article[] @relation("ArticleToTag")
  
  @@index([name])
}

// ユーザー認証用モデル
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?   // メール/パスワード認証用
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  favorites     Favorite[]
  articleViews  ArticleView[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

// 拡張機能用モデル
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, articleId])
}

model ArticleView {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  viewedAt  DateTime?  // nullable、デフォルト値削除
  isRead    Boolean  @default(false)
  readAt    DateTime?
  
  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])
  
  @@unique([userId, articleId])
  @@index([userId, viewedAt])
  @@index([articleId])
  @@index([userId, isRead])
}

// 週刊ダイジェスト機能
model WeeklyDigest {
  id            String   @id @default(cuid())
  weekStartDate DateTime
  weekEndDate   DateTime
  articleCount  Int
  topArticles   Json     // トップ記事の配列（{ id, title, url, score }）
  categories    Json     // カテゴリ別集計
  createdAt     DateTime @default(now())
  
  @@unique([weekStartDate])
}

// PostgreSQL全文検索用の設定（マイグレーション後に手動で実行）
// CREATE EXTENSION IF NOT EXISTS pg_trgm;
// CREATE EXTENSION IF NOT EXISTS unaccent;
// ALTER DATABASE techtrend_dev SET default_text_search_config = 'pg_catalog.japanese';