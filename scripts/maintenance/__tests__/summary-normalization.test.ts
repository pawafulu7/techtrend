import { normalizeDetailedSummary } from '../normalize-existing-summaries';

describe('normalizeDetailedSummary', () => {
  it('ラベルなしの詳細要約にラベルを追加する', () => {
    const input = `・Denoにおける一時ディレクトリの作成と削除に関する記事で、Deno.makeTempDirやDeno.makeTempDirSyncといったAPIと、それらを用いた際の自動削除の欠如が主題です。
・Deno.makeTempDir等で作成された一時ディレクトリは、明示的に削除しないと残ってしまうため、リソースリークや後処理の複雑化につながります。
・using宣言を用いることで、一時ディレクトリを自動的に削除する仕組みを実現します。
・具体的なコード例は本文中に記載されていませんが、using構文を用いてDeno.makeTempDirを呼び出し、その結果をusingブロック内で利用する実装が想定されます。
・コードの簡潔化、エラーハンドリングの簡素化、リソースリークの防止が期待されます。
・using宣言が利用可能なDenoのバージョンを確認する必要があります。`;
    
    const expected = `・記事の主題は、Denoにおける一時ディレクトリの作成と削除に関する記事で、Deno.makeTempDirやDeno.makeTempDirSyncといったAPIと、それらを用いた際の自動削除の欠如が主題です。
・具体的な問題は、Deno.makeTempDir等で作成された一時ディレクトリは、明示的に削除しないと残ってしまうため、リソースリークや後処理の複雑化につながります。
・提示されている解決策は、using宣言を用いることで、一時ディレクトリを自動的に削除する仕組みを実現します。
・実装方法の詳細については、具体的なコード例は本文中に記載されていませんが、using構文を用いてDeno.makeTempDirを呼び出し、その結果をusingブロック内で利用する実装が想定されます。
・期待される効果は、コードの簡潔化、エラーハンドリングの簡素化、リソースリークの防止が期待されます。
・実装時の注意点は、using宣言が利用可能なDenoのバージョンを確認する必要があります。`;
    
    expect(normalizeDetailedSummary(input)).toBe(expected);
  });
  
  it('既にラベルがある場合は変更しない', () => {
    const input = `・記事の主題は、Viteの脆弱性発見と、そのエコシステム全体への影響への対処法の振り返りである。
・具体的な問題は、Viteに存在するソースコード漏洩の脆弱性（GHSA-vg6x-rcgg-rjx6 / CV...）であり、その影響範囲はViteエコシステム全体に及ぶ。
・提示されている解決策は、脆弱性レポートをViteに報告し、エコシステム内の他のツールにも報告することである。
・実装方法の詳細については、記事では非技術的な側面に焦点を当てているため、具体的なコード例や設定方法は記述されていない。
・期待される効果は、Viteと関連ツールのセキュリティ向上、ソースコード漏洩の防止である。
・実装時の注意点や制約事項、必要な環境については、記事では触れられていない。`;
    
    expect(normalizeDetailedSummary(input)).toBe(input);
  });
  
  it('部分的にラベルがある場合は不足分を補完する', () => {
    const input = `・記事の主題は、TypeScriptの型システムの高度な活用方法について解説している。
・ジェネリクスや条件付き型を使用しても、複雑な型定義では型推論が失敗するケースがある。
・template literal typesとinferキーワードを組み合わせることで、より柔軟な型定義が可能になる。
・実装方法の詳細については、サンプルコードで具体的な使用例を示している。
・型安全性の向上とコンパイル時エラーの早期発見が可能になる。
・TypeScript 4.1以降が必要で、IDEのサポートも確認が必要。`;
    
    const expected = `・記事の主題は、TypeScriptの型システムの高度な活用方法について解説している。
・具体的な問題は、ジェネリクスや条件付き型を使用しても、複雑な型定義では型推論が失敗するケースがある。
・提示されている解決策は、template literal typesとinferキーワードを組み合わせることで、より柔軟な型定義が可能になる。
・実装方法の詳細については、サンプルコードで具体的な使用例を示している。
・期待される効果は、型安全性の向上とコンパイル時エラーの早期発見が可能になる。
・実装時の注意点は、TypeScript 4.1以降が必要で、IDEのサポートも確認が必要。`;
    
    expect(normalizeDetailedSummary(input)).toBe(expected);
  });
  
  it('空の入力に対して空文字を返す', () => {
    expect(normalizeDetailedSummary('')).toBe('');
  });
  
  it('箇条書きでない行はそのまま保持する', () => {
    const input = `概要:
・記事の主題は、Reactのパフォーマンス最適化について。
・具体的な問題は、不要な再レンダリングによるパフォーマンス低下。`;
    
    const expected = `概要:
・記事の主題は、Reactのパフォーマンス最適化について。
・具体的な問題は、不要な再レンダリングによるパフォーマンス低下。`;
    
    expect(normalizeDetailedSummary(input)).toBe(expected);
  });
});